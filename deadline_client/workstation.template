---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides configuration for a Deadline workstation client instance.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network (existing Management VPC config)
        Parameters:
          - pManagementVPC
          - pMgmtAppPrivateSubnetA

      - Label:
          default: Deadline workstation Configuration
        Parameters:
          - pDeadlineWorkstationInstanceType
          - pDeadlineWorkstationAmi

Parameters:
  pManagementVPC:
    Description: Management VPC
    Type: AWS::EC2::VPC::Id

  pMgmtAppPrivateSubnetA:
    Description: Deadline workstation Subnet A
    Type: AWS::EC2::Subnet::Id

  pDeadlineWorkstationInstanceType:
    Description: Instance type for the Deadline workstation
    Type: String

  pDeadlineWorkstationAmi:
    Description: Which Deadline workstation AMI do you want to use?
    Type: AWS::EC2::Image::Id

  pDeadlineArtifacts:
    Description: S3 bucket name with Deadline Artifacts
    Type: String

  pDeadlineRepoSecurityGroup:
    Description: Deadline repo security group
    Type: AWS::EC2::SecurityGroup::Id

  pDeadlineRepositoryPrivateIp:
    Description: Privat IP of Deadline repository imstance
    Type: String

  pLicenseServerSecurityGroup:
    Description: License server security group
    Type: AWS::EC2::SecurityGroup::Id

  pDeadlineLicenseServerPrivateIp:
    Description: Private IP of License server
    Type: String

  pDeadlineRepositorySambaPassword:
    Description: Password for Samba
    Type: String
    NoEcho: true

  pDeadlineUserPassword:
    Description: Password for deadlineuser RDP connection
    Type: String
    NoEcho: true

  pEnvironment:
    AllowedValues:
      - DEV
      - TEST
      - PROD
    Default: DEV
    Description: Environment (Dev, Test or Prod)
    Type: String

Resources:
  rDeadlineWorkstationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Deadline workstation Instances
      VpcId: !Ref pManagementVPC
      Tags:
        - Key: Name
          Value: vfx-deadline-workstation-sg
        - Key: Environment
          Value: !Ref pEnvironment

  rDeadlineWorkstationToDeadlineRepoIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref pDeadlineRepoSecurityGroup
      Description: vfx-deadline-workstation-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref rDeadlineWorkstationSecurityGroup

  rDeadlineWorkstationToLicenseServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref pLicenseServerSecurityGroup
      Description: vfx-deadline-workstation-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref rDeadlineWorkstationSecurityGroup

  rDeadlineWorkstationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  rDeadlineWorkstationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rDeadlineWorkstationInstanceRole

  rDeadlineWorkstationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  rDeadlineWorkstationEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              jq: []
              awscli: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource rDeadlineWorkstationEC2Instance
                runas=root
            /etc/udev/rules.d/75-ec2-nvme-devices.rules:
              content: |
                # Copyright (C) 2006-2016 Amazon.com, Inc. or its affiliates.
                # All Rights Reserved.
                #
                # Licensed under the Apache License, Version 2.0 (the "License").
                # You may not use this file except in compliance with the License.
                # A copy of the License is located at
                #
                #    http://aws.amazon.com/apache2.0/
                #
                # or in the "license" file accompanying this file. This file is
                # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
                # OF ANY KIND, either express or implied. See the License for the
                # specific language governing permissions and limitations under the
                # License.

                #nvme-ns-* devices
                KERNEL=="nvme[0-9]*n[0-9]*", ENV{DEVTYPE}=="disk", ATTRS{serial}=="?*", ATTRS{model}=="?*", SYMLINK+="disk/by-id/nvme-$attr{model}_$attr{serial}-ns-%n", OPTIONS+="string_escape=replace"

                #nvme partitions
                KERNEL=="nvme[0-9]*n[0-9]*p[0-9]*", ENV{DEVTYPE}=="partition", ATTRS{serial}=="?*", ATTRS{model}=="?*",  IMPORT{program}="ec2nvme-nsid %k"
                KERNEL=="nvme[0-9]*n[0-9]*p[0-9]*", ENV{DEVTYPE}=="partition", ATTRS{serial}=="?*", ATTRS{model}=="?*",  ENV{_NS_ID}=="?*", SYMLINK+="disk/by-id/nvme-$attr{model}_$attr{serial}-ns-$env{_NS_ID}-part%n", OPTIONS+="string_escape=replace"

                # ebs nvme devices
                KERNEL=="nvme[0-9]*n[0-9]*", ENV{DEVTYPE}=="disk", ATTRS{model}=="Amazon Elastic Block Store", PROGRAM="/sbin/ebsnvme-id -u /dev/%k", SYMLINK+="%c"
              mode: '0644'
            /sbin/ebsnvme-id:
              content: |
                #!/usr/bin/env python2.7

                # Copyright (C) 2017 Amazon.com, Inc. or its affiliates.
                # All Rights Reserved.
                #
                # Licensed under the Apache License, Version 2.0 (the "License").
                # You may not use this file except in compliance with the License.
                # A copy of the License is located at
                #
                #    http://aws.amazon.com/apache2.0/
                #
                # or in the "license" file accompanying this file. This file is
                # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
                # OF ANY KIND, either express or implied. See the License for the
                # specific language governing permissions and limitations under the
                # License.

                """
                Usage:
                Read EBS device information and provide information about
                the volume.
                """

                import argparse
                from ctypes import *
                from fcntl import ioctl
                import sys

                NVME_ADMIN_IDENTIFY = 0x06
                NVME_IOCTL_ADMIN_CMD = 0xC0484E41
                AMZN_NVME_VID = 0x1D0F
                AMZN_NVME_EBS_MN = "Amazon Elastic Block Store"

                class nvme_admin_command(Structure):
                    _pack_ = 1
                    _fields_ = [("opcode", c_uint8),      # op code
                                ("flags", c_uint8),       # fused operation
                                ("cid", c_uint16),        # command id
                                ("nsid", c_uint32),       # namespace id
                                ("reserved0", c_uint64),
                                ("mptr", c_uint64),       # metadata pointer
                                ("addr", c_uint64),       # data pointer
                                ("mlen", c_uint32),       # metadata length
                                ("alen", c_uint32),       # data length
                                ("cdw10", c_uint32),
                                ("cdw11", c_uint32),
                                ("cdw12", c_uint32),
                                ("cdw13", c_uint32),
                                ("cdw14", c_uint32),
                                ("cdw15", c_uint32),
                                ("reserved1", c_uint64)]

                class nvme_identify_controller_amzn_vs(Structure):
                    _pack_ = 1
                    _fields_ = [("bdev", c_char * 32),  # block device name
                                ("reserved0", c_char * (1024 - 32))]

                class nvme_identify_controller_psd(Structure):
                    _pack_ = 1
                    _fields_ = [("mp", c_uint16),       # maximum power
                                ("reserved0", c_uint16),
                                ("enlat", c_uint32),     # entry latency
                                ("exlat", c_uint32),     # exit latency
                                ("rrt", c_uint8),       # relative read throughput
                                ("rrl", c_uint8),       # relative read latency
                                ("rwt", c_uint8),       # relative write throughput
                                ("rwl", c_uint8),       # relative write latency
                                ("reserved1", c_char * 16)]

                class nvme_identify_controller(Structure):
                    _pack_ = 1
                    _fields_ = [("vid", c_uint16),          # PCI Vendor ID
                                ("ssvid", c_uint16),        # PCI Subsystem Vendor ID
                                ("sn", c_char * 20),        # Serial Number
                                ("mn", c_char * 40),        # Module Number
                                ("fr", c_char * 8),         # Firmware Revision
                                ("rab", c_uint8),           # Recommend Arbitration Burst
                                ("ieee", c_uint8 * 3),      # IEEE OUI Identifier
                                ("mic", c_uint8),           # Multi-Interface Capabilities
                                ("mdts", c_uint8),          # Maximum Data Transfer Size
                                ("reserved0", c_uint8 * (256 - 78)),
                                ("oacs", c_uint16),         # Optional Admin Command Support
                                ("acl", c_uint8),           # Abort Command Limit
                                ("aerl", c_uint8),          # Asynchronous Event Request Limit
                                ("frmw", c_uint8),          # Firmware Updates
                                ("lpa", c_uint8),           # Log Page Attributes
                                ("elpe", c_uint8),          # Error Log Page Entries
                                ("npss", c_uint8),          # Number of Power States Support
                                ("avscc", c_uint8),         # Admin Vendor Specific Command Configuration
                                ("reserved1", c_uint8 * (512 - 265)),
                                ("sqes", c_uint8),          # Submission Queue Entry Size
                                ("cqes", c_uint8),          # Completion Queue Entry Size
                                ("reserved2", c_uint16),
                                ("nn", c_uint32),            # Number of Namespaces
                                ("oncs", c_uint16),         # Optional NVM Command Support
                                ("fuses", c_uint16),        # Fused Operation Support
                                ("fna", c_uint8),           # Format NVM Attributes
                                ("vwc", c_uint8),           # Volatile Write Cache
                                ("awun", c_uint16),         # Atomic Write Unit Normal
                                ("awupf", c_uint16),        # Atomic Write Unit Power Fail
                                ("nvscc", c_uint8),         # NVM Vendor Specific Command Configuration
                                ("reserved3", c_uint8 * (704 - 531)),
                                ("reserved4", c_uint8 * (2048 - 704)),
                                ("psd", nvme_identify_controller_psd * 32),     # Power State Descriptor
                                ("vs", nvme_identify_controller_amzn_vs)]  # Vendor Specific

                class ebs_nvme_device:
                    def __init__(self, device):
                        self.device = device
                        self.ctrl_identify()

                    def _nvme_ioctl(self, id_response, id_len):
                        admin_cmd = nvme_admin_command(opcode = NVME_ADMIN_IDENTIFY,
                                                       addr = id_response,
                                                       alen = id_len,
                                                       cdw10 = 1)

                        with open(self.device, "rw") as nvme:
                            ioctl(nvme, NVME_IOCTL_ADMIN_CMD, admin_cmd)

                    def ctrl_identify(self):
                        self.id_ctrl = nvme_identify_controller()
                        self._nvme_ioctl(addressof(self.id_ctrl), sizeof(self.id_ctrl))

                        if self.id_ctrl.vid != AMZN_NVME_VID or self.id_ctrl.mn.strip() != AMZN_NVME_EBS_MN:
                            raise TypeError("[ERROR] Not an EBS device: '{0}'".format(self.device))

                    def get_volume_id(self):
                        vol = self.id_ctrl.sn

                        if vol.startswith("vol") and vol[3] != "-":
                            vol = "vol-" + vol[3:]

                        return vol

                    def get_block_device(self, stripped=False):
                        dev = self.id_ctrl.vs.bdev.strip()

                        if stripped and dev.startswith("/dev/"):
                            dev = dev[5:]

                        return dev

                if __name__ == "__main__":
                    parser = argparse.ArgumentParser(description="Reads EBS information from NVMe devices.")
                    parser.add_argument("device", nargs=1, help="Device to query")

                    display = parser.add_argument_group("Display Options")
                    display.add_argument("-v", "--volume", action="store_true",
                            help="Return volume-id")
                    display.add_argument("-b", "--block-dev", action="store_true",
                            help="Return block device mapping")
                    display.add_argument("-u", "--udev", action="store_true",
                            help="Output data in format suitable for udev rules")

                    if len(sys.argv) < 2:
                        parser.print_help()
                        sys.exit(1)

                    args = parser.parse_args()

                    get_all = not (args.udev or args.volume or args.block_dev)

                    try:
                        dev = ebs_nvme_device(args.device[0])
                    except (IOError, TypeError) as err:
                        print >> sys.stderr, err
                        sys.exit(1)

                    if get_all or args.volume:
                        print "Volume ID: {0}".format(dev.get_volume_id())
                    if get_all or args.block_dev or args.udev:
                        print dev.get_block_device(args.udev)
              mode: '0755'
          commands:
            01_check_data:
              command: |
                while [ ! -e /dev/xvdh ]; do
                  udevadm trigger -y '*nvme*'
                  sleep 5
                done
            02_format_disk:
              command: mkfs -t ext4 /dev/xvdh
            03_mkdir_data:
              command: mkdir -p /data
            04_mount:
              command: mount /dev/xvdh /data
            05_fstab:
              command: echo "/dev/xvdh /data ext4 defaults,nofail 0 2" >> /etc/fstab
            06_mkdir_downloads:
              command: mkdir -p /data/downloads
            07_copy_Deadline_files_from_s3:
              command: !Sub aws s3 cp s3://${pDeadlineArtifacts} /data/downloads --recursive
            08_mkdir_install:
              command: mkdir -p /data/install
            09_untar:
              command: ls /data/downloads | grep Deadline.*linux.* | (read repo; tar -C /data/install -xvf /data/downloads/$repo)
            10_mkdir_DeadlineRepository:
              command: mkdir -p /data/DeadlineRepository
            11_mount_DeadlineRepository:
              command: !Sub |
                # create fstab entry for Deadline repository
                echo "//${pDeadlineRepositoryPrivateIp}/DeadlineRepository /data/DeadlineRepository cifs username=Deadlineuser,password=${pDeadlineRepositorySambaPassword} 0 0" >> /etc/fstab

                # mount the Deadline repository
                mount -a
            12_mkdir_Thinkbox:
              command: mkdir -p /data/Thinkbox
            13_install:
              command: !Sub |
                ls /data/install | grep DeadlineClient | \
                (read repo; /data/install/$repo \
                --mode unattended \
                --prefix "/data/Thinkbox/Deadline10" \
                --connectiontype Repository \
                --repositorydir "/data/DeadlineRepository" \
                --licensemode Standard \
                --licenseserver @${pDeadlineLicenseServerPrivateIp} \
                --launcherstartup true \
                --slavestartup false)
            14_xrdp_conf:
              command: |
                systemctl enable xrdp
                systemctl start xrdp
                chcon --type=bin_t /usr/sbin/xrdp
                chcon --type=bin_t /usr/sbin/xrdp-sesman
            15_gnome_conf:
              command: |
                # Load GUI by default on reboot
                systemctl set-default graphical.target
            16_rdp_user:
              command: !Sub |
                useradd deadlineuser
                echo 'deadlineuser:${pDeadlineUserPassword}' | chpasswd
                usermod -aG wheel deadlineuser
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvdh
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            Encrypted: true
      IamInstanceProfile: !Ref rDeadlineWorkstationInstanceProfile
      ImageId: !Ref pDeadlineWorkstationAmi
      InstanceType: !Ref pDeadlineWorkstationInstanceType
      SecurityGroupIds:
        - !Ref rDeadlineWorkstationSecurityGroup
      SubnetId: !Ref pMgmtAppPrivateSubnetA
      Tags:
        - Key: Name
          Value: vfx-deadline-workstation
        - Key: Environment
          Value: !Ref pEnvironment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y epel-release
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y pystache python-daemon
          yum install -y xrdp bzip2 redhat-lsb
          yum groupinstall -y "GNOME DESKTOP"

          # Disable built in firewall
          systemctl disable firewalld
          systemctl stop firewalld

          # Enable and start ssm-agent
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent

          # Install CloudFormation cfn-init
          /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/lib/python2*/site-packages/aws_cfn_bootstrap*/init/redhat/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rDeadlineWorkstationEC2Instance --region ${AWS::Region}
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource rDeadlineWorkstationEC2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT20M"

Outputs:
  rDeadlineWorkstationSecurityGroup:
    Value: !Ref rDeadlineWorkstationSecurityGroup

  rDeadlineWorkstationEC2Instance:
    Value: !GetAtt rDeadlineWorkstationEC2Instance.PrivateIp

  rDeadlineWorkstationInstanceRole:
    Value: !Ref rDeadlineWorkstationInstanceRole